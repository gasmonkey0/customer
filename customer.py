# -*- coding: utf-8 -*-
"""Untitled38.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gj7v2HvZBP6munGXo7bY5gf3iHo31J7Q
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler

# Load dataset (Replace with actual dataset path)
from google.colab import files
data = files.upload()

# Load dataset
df = pd.read_csv("data.csv", encoding="ISO-8859-1")

# Convert InvoiceDate to datetime format
df["InvoiceDate"] = pd.to_datetime(df["InvoiceDate"], errors='coerce')

# Drop rows with invalid dates (if any)
df.dropna(subset=["InvoiceDate"], inplace=True)

# Ensure CustomerID is treated as a string
df["CustomerID"] = df["CustomerID"].astype(str)

# Compute Total Purchase Amount
df["TotalPurchase"] = df["Quantity"] * df["UnitPrice"]
df = df[df["TotalPurchase"] > 0]  # Remove negative purchases

# RFM Analysis
reference_date = df["InvoiceDate"].max()  # Use last transaction date as reference
rfm = df.groupby("CustomerID").agg({
    "InvoiceDate": lambda x: (reference_date - x.max()).days,  # Recency
    "InvoiceNo": "nunique",  # Frequency (Unique transactions)
    "TotalPurchase": "sum"  # Monetary (Total revenue per customer)
})

# Rename columns for clarity
rfm.rename(columns={"InvoiceDate": "Recency", "InvoiceNo": "Frequency", "TotalPurchase": "Monetary"}, inplace=True)

# Standardize the data
scaler = StandardScaler()
rfm_scaled = scaler.fit_transform(rfm)

# Determine optimal clusters using the Elbow Method
wcss = []
for i in range(1, 11):
    kmeans = KMeans(n_clusters=i, n_init=10, random_state=42)
    kmeans.fit(rfm_scaled)
    wcss.append(kmeans.inertia_)

# Plot Elbow Curve
plt.figure(figsize=(8,5))
plt.plot(range(1, 11), wcss, marker='o', linestyle='-')
plt.xlabel('Number of Clusters')
plt.ylabel('WCSS')
plt.title('Elbow Method for Optimal K')
plt.show()

# K-Means Clustering (assuming optimal K=4 from elbow curve)
kmeans = KMeans(n_clusters=4, n_init=10, random_state=42)
rfm["Cluster"] = kmeans.fit_predict(rfm_scaled)

# Visualization: Recency vs. Monetary with Clusters
plt.figure(figsize=(8,6))
sns.scatterplot(x=rfm["Recency"], y=rfm["Monetary"], hue=rfm["Cluster"], palette="viridis")
plt.title("Customer Segmentation Based on RFM Analysis")
plt.xlabel("Recency (Days)")
plt.ylabel("Monetary (Total Spend)")
plt.legend(title="Cluster")
plt.show()

# Save results
rfm.to_csv("customer_segments.csv", index=False)
print("Customer Segments saved successfully!")

df.to_excel("cleaned_data.xlsx", index=False)

from google.colab import files
files.download("cleaned_data.xlsx")  # Replace with your filename